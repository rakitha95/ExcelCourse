#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
יצירת קובץ Excel מקיף לקורס Excel
מכיל דוגמאות לכל החומר הנלמד בקורס
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.chart import BarChart, LineChart, PieChart, Reference
from openpyxl.worksheet.table import Table, TableStyleInfo

def create_employee_data():
    """יצירת נתוני עובדים לדוגמה"""
    employees = {
        'שם_עובד': ['דוד כהן', 'שרה לוי', 'משה גולדברג', 'רחל אברהם', 'יוסף רוזן', 
                    'מיכל שפירא', 'דניאל ברגר', 'נועה כץ', 'אברהם שטיין', 'תמר פלד'],
        'גיל': [28, 35, 42, 31, 29, 38, 45, 26, 33, 40],
        'משכורת': [8500, 12000, 15000, 9500, 7800, 13500, 18000, 7200, 11000, 16000],
        'תאריך_העסקה': ['2020-01-15', '2018-03-20', '2015-07-10', '2021-09-05', '2022-01-30',
                         '2019-11-12', '2012-05-25', '2023-02-18', '2020-08-14', '2017-12-03'],
        'מחלקה': ['מכירות', 'פיתוח', 'ניהול', 'מכירות', 'תמיכה', 'פיתוח', 'ניהול', 'תמיכה', 'מכירות', 'פיתוח'],
        'תפקיד': ['נציג מכירות', 'מפתח', 'מנהל', 'נציגת מכירות', 'טכנאי', 'מפתחת בכירה', 'מנהל בכיר', 'טכנאית', 'מנהל מכירות', 'מפתח בכיר']
    }
    return pd.DataFrame(employees)

def create_inventory_data():
    """יצירת נתוני מלאי לדוגמה"""
    inventory = {
        'קוד_מוצר': ['M001', 'M002', 'M003', 'M004', 'M005', 'M006', 'M007', 'M008', 'M009', 'M010'],
        'שם_מוצר': ['מחשב נייד', 'טאבלט', 'טלפון חכם', 'מדפסת', 'מקלדת', 'עכבר', 'מסך', 'רמקולים', 'מצלמה', 'מיקרופון'],
        'קטגוריה': ['אלקטרוניקה', 'אלקטרוניקה', 'אלקטרוניקה', 'ציוד היקפי', 'ציוד היקפי', 'ציוד היקפי', 'ציוד היקפי', 'ציוד היקפי', 'אלקטרוניקה', 'ציוד היקפי'],
        'כמות_במלאי': [15, 8, 25, 12, 50, 45, 20, 30, 10, 18],
        'מחיר_יחידה': [3500, 1200, 2800, 800, 150, 80, 1200, 300, 1800, 200],
        'ספק': ['טק-סאפלי', 'דיגיטל-פרו', 'טק-סאפלי', 'אופיס-מקס', 'דיגיטל-פרו', 'אופיס-מקס', 'טק-סאפלי', 'דיגיטל-פרו', 'טק-סאפלי', 'אופיס-מקס'],
        'תאריך_רכישה_אחרונה': ['2024-01-15', '2024-02-20', '2024-01-30', '2024-03-05', '2024-02-10', '2024-03-15', '2024-01-25', '2024-02-28', '2024-03-10', '2024-02-05'],
        'מיקום_במחסן': ['A1', 'A2', 'B1', 'B2', 'C1', 'C2', 'D1', 'D2', 'E1', 'E2']
    }
    return pd.DataFrame(inventory)

def create_sales_data():
    """יצירת נתוני מכירות לדוגמה"""
    sales = {
        'תאריך_מכירה': ['2024-01-15', '2024-01-16', '2024-01-17', '2024-01-18', '2024-01-19', '2024-01-20', '2024-01-21', '2024-01-22', '2024-01-23', '2024-01-24'],
        'מספר_חשבונית': ['INV001', 'INV002', 'INV003', 'INV004', 'INV005', 'INV006', 'INV007', 'INV008', 'INV009', 'INV010'],
        'לקוח': ['חברת ABC', 'חברת XYZ', 'חברת DEF', 'חברת GHI', 'חברת JKL', 'חברת MNO', 'חברת PQR', 'חברת STU', 'חברת VWX', 'חברת YZ'],
        'מוצר': ['מחשב נייד', 'טאבלט', 'טלפון חכם', 'מדפסת', 'מקלדת', 'עכבר', 'מסך', 'רמקולים', 'מצלמה', 'מיקרופון'],
        'כמות': [2, 5, 3, 1, 10, 15, 4, 8, 2, 6],
        'מחיר_יחידה': [3500, 1200, 2800, 800, 150, 80, 1200, 300, 1800, 200],
        'הנחה_אחוז': [5, 10, 0, 15, 20, 25, 8, 12, 0, 18],
        'מוכר': ['דוד כהן', 'שרה לוי', 'משה גולדברג', 'רחל אברהם', 'יוסף רוזן', 'מיכל שפירא', 'דניאל ברגר', 'נועה כץ', 'אברהם שטיין', 'תמר פלד'],
        'אזור_מכירה': ['תל אביב', 'ירושלים', 'חיפה', 'באר שבע', 'תל אביב', 'ירושלים', 'חיפה', 'באר שבע', 'תל אביב', 'ירושלים'],
        'ערוץ_מכירה': ['חנות', 'אינטרנט', 'טלפון', 'חנות', 'אינטרנט', 'טלפון', 'חנות', 'אינטרנט', 'טלפון', 'חנות'],
        'שיטת_תשלום': ['כרטיס אשראי', 'העברה בנקאית', 'מזומן', 'כרטיס אשראי', 'העברה בנקאית', 'מזומן', 'כרטיס אשראי', 'העברה בנקאית', 'מזומן', 'כרטיס אשראי'],
        'סטטוס_תשלום': ['שולם', 'ממתין', 'שולם', 'שולם', 'ממתין', 'שולם', 'שולם', 'ממתין', 'שולם', 'שולם']
    }
    return pd.DataFrame(sales)

def create_project_data():
    """יצירת נתוני פרויקטים לדוגמה"""
    projects = {
        'שם_פרויקט': ['פיתוח אתר חדש', 'שדרוג מערכת', 'אינטגרציה', 'מיגרציה', 'אופטימיזציה', 'בדיקות אבטחה', 'פיתוח אפליקציה', 'תחזוקה', 'שדרוג תשתיות', 'פיתוח API'],
        'מנהל_פרויקט': ['דוד כהן', 'שרה לוי', 'משה גולדברג', 'רחל אברהם', 'יוסף רוזן', 'מיכל שפירא', 'דניאל ברגר', 'נועה כץ', 'אברהם שטיין', 'תמר פלד'],
        'צוות': ['דוד, שרה, משה', 'רחל, יוסף, מיכל', 'דניאל, נועה, אברהם', 'תמר, דוד, שרה', 'משה, רחל, יוסף', 'מיכל, דניאל, נועה', 'אברהם, תמר, דוד', 'שרה, משה, רחל', 'יוסף, מיכל, דניאל', 'נועה, אברהם, תמר'],
        'תאריך_התחלה': ['2024-01-01', '2024-01-15', '2024-02-01', '2024-02-15', '2024-03-01', '2024-03-15', '2024-04-01', '2024-04-15', '2024-05-01', '2024-05-15'],
        'תאריך_סיום_מתוכנן': ['2024-03-31', '2024-04-30', '2024-05-31', '2024-06-30', '2024-07-31', '2024-08-31', '2024-09-30', '2024-10-31', '2024-11-30', '2024-12-31'],
        'תאריך_סיום_בפועל': ['2024-04-15', '2024-05-10', '2024-06-15', '2024-07-20', '2024-08-10', '2024-09-15', '2024-10-20', '2024-11-10', '2024-12-15', ''],
        'תקציב_מתוכנן': [50000, 75000, 100000, 125000, 150000, 80000, 200000, 60000, 175000, 90000],
        'עלות_בפועל': [55000, 80000, 95000, 130000, 160000, 75000, 210000, 65000, 180000, 0],
        'סטטוס': ['הושלם', 'בביצוע', 'הושלם', 'בביצוע', 'הושלם', 'בביצוע', 'בביצוע', 'הושלם', 'בביצוע', 'תכנון'],
        'אחוז_השלמה': [100, 75, 100, 60, 100, 80, 70, 100, 85, 10],
        'סיכונים': ['נמוך', 'בינוני', 'נמוך', 'גבוה', 'בינוני', 'נמוך', 'גבוה', 'נמוך', 'בינוני', 'נמוך']
    }
    return pd.DataFrame(projects)

def create_formulas_examples():
    """יצירת דוגמאות נוסחאות"""
    formulas_data = {
        'סוג_נוסחה': ['חיבור', 'חיסור', 'כפל', 'חילוק', 'חזקה', 'סכום', 'ממוצע', 'ספירה', 'מקסימום', 'מינימום'],
        'נוסחה': ['=A1+B1', '=A1-B1', '=A1*B1', '=A1/B1', '=A1^2', '=SUM(A1:A10)', '=AVERAGE(A1:A10)', '=COUNT(A1:A10)', '=MAX(A1:A10)', '=MIN(A1:A10)'],
        'תיאור': ['חיבור שני מספרים', 'חיסור שני מספרים', 'כפל שני מספרים', 'חילוק שני מספרים', 'העלאה בחזקה', 'סכום טווח תאים', 'ממוצע טווח תאים', 'ספירת תאים לא ריקים', 'ערך מקסימלי בטווח', 'ערך מינימלי בטווח'],
        'דוגמה_ערך_A': [10, 20, 5, 100, 4, '', '', '', '', ''],
        'דוגמה_ערך_B': [5, 8, 3, 4, '', '', '', '', '', ''],
        'תוצאה': [15, 12, 15, 25, 16, 'סכום הטווח', 'ממוצע הטווח', 'מספר התאים', 'הערך הגבוה', 'הערך הנמוך']
    }
    return pd.DataFrame(formulas_data)

def create_text_functions():
    """יצירת דוגמאות פונקציות טקסט"""
    text_data = {
        'פונקציה': ['CONCATENATE', 'LEFT', 'RIGHT', 'MID', 'LEN', 'TRIM', 'UPPER', 'LOWER', 'PROPER', 'SUBSTITUTE'],
        'נוסחה': ['=CONCATENATE(A1," ",B1)', '=LEFT(A1,3)', '=RIGHT(A1,2)', '=MID(A1,2,4)', '=LEN(A1)', '=TRIM(A1)', '=UPPER(A1)', '=LOWER(A1)', '=PROPER(A1)', '=SUBSTITUTE(A1,"ישן","חדש")'],
        'תיאור': ['חיבור טקסט', 'תווים משמאל', 'תווים מימין', 'תווים מהאמצע', 'אורך טקסט', 'הסרת רווחים', 'אותיות גדולות', 'אותיות קטנות', 'אות ראשונה גדולה', 'החלפת טקסט'],
        'דוגמה_קלט': ['דוד כהן', 'Excel', 'Python', 'JavaScript', '  טקסט  ', 'excel', 'EXCEL', 'excel', 'דוד כהן', 'טקסט ישן'],
        'תוצאה': ['דוד כהן', 'Exc', 'on', 'avaS', '8', 'טקסט', 'EXCEL', 'excel', 'דוד כהן', 'טקסט חדש']
    }
    return pd.DataFrame(text_data)

def create_date_functions():
    """יצירת דוגמאות פונקציות תאריך"""
    date_data = {
        'פונקציה': ['TODAY', 'NOW', 'YEAR', 'MONTH', 'DAY', 'WEEKDAY', 'DATEDIF', 'WORKDAY', 'EDATE', 'EOMONTH'],
        'נוסחה': ['=TODAY()', '=NOW()', '=YEAR(A1)', '=MONTH(A1)', '=DAY(A1)', '=WEEKDAY(A1)', '=DATEDIF(A1,B1,"Y")', '=WORKDAY(A1,5)', '=EDATE(A1,3)', '=EOMONTH(A1,0)'],
        'תיאור': ['תאריך היום', 'תאריך ושעה', 'שנה מתאריך', 'חודש מתאריך', 'יום מתאריך', 'יום בשבוע', 'שנים בין תאריכים', 'יום עבודה + ימים', 'תאריך + חודשים', 'סוף חודש'],
        'דוגמה_תאריך': ['2024-01-15', '2024-01-15 14:30', '2024-01-15', '2024-01-15', '2024-01-15', '2024-01-15', '2024-01-15', '2024-01-15', '2024-01-15', '2024-01-15'],
        'דוגמה_תאריך_2': ['', '', '', '', '', '', '2024-12-31', '', '', ''],
        'תוצאה': ['תאריך היום', 'תאריך ושעה', '2024', '1', '15', '2 (יום שני)', '0 שנים', 'יום עבודה + 5', '2024-04-15', '2024-01-31']
    }
    return pd.DataFrame(date_data)

def create_logical_functions():
    """יצירת דוגמאות פונקציות לוגיות"""
    logical_data = {
        'פונקציה': ['IF', 'IF עם תנאים מרובים', 'AND', 'OR', 'NOT', 'COUNTIF', 'SUMIF', 'AVERAGEIF', 'COUNTIFS', 'SUMIFS'],
        'נוסחה': ['=IF(A1>1000,"גבוה","נמוך")', '=IF(A1>1000,"גבוה",IF(A1>500,"בינוני","נמוך"))', '=AND(A1>1000,B1<5000)', '=OR(A1>1000,B1<5000)', '=NOT(A1>1000)', '=COUNTIF(A1:A10,">1000")', '=SUMIF(A1:A10,">1000",B1:B10)', '=AVERAGEIF(A1:A10,">1000",B1:B10)', '=COUNTIFS(A1:A10,">1000",B1:B10,"<5000")', '=SUMIFS(C1:C10,A1:A10,">1000",B1:B10,"<5000")'],
        'תיאור': ['תנאי פשוט', 'תנאי עם ELSE IF', 'וגם', 'או', 'לא', 'ספירה מותנית', 'סכום מותנה', 'ממוצע מותנה', 'ספירה מרובה', 'סכום מרובה'],
        'דוגמה_ערך': [1500, 750, 2000, 3000, 800, 'טווח ערכים', 'טווח ערכים', 'טווח ערכים', 'טווח ערכים', 'טווח ערכים'],
        'תוצאה': ['גבוה', 'בינוני', 'TRUE', 'TRUE', 'TRUE', 'מספר ערכים > 1000', 'סכום ערכים > 1000', 'ממוצע ערכים > 1000', 'מספר ערכים בטווח', 'סכום ערכים בטווח']
    }
    return pd.DataFrame(logical_data)

def create_lookup_functions():
    """יצירת דוגמאות פונקציות חיפוש"""
    lookup_data = {
        'פונקציה': ['VLOOKUP', 'HLOOKUP', 'INDEX+MATCH', 'XLOOKUP', 'CHOOSE', 'OFFSET', 'INDIRECT'],
        'נוסחה': ['=VLOOKUP("ערך",A1:B10,2,FALSE)', '=HLOOKUP("ערך",A1:J2,2,FALSE)', '=INDEX(B1:B10,MATCH("ערך",A1:A10,0))', '=XLOOKUP("ערך",A1:A10,B1:B10)', '=CHOOSE(2,"אפשרות1","אפשרות2","אפשרות3")', '=OFFSET(A1,2,3)', '=INDIRECT("A1")'],
        'תיאור': ['חיפוש אנכי', 'חיפוש אופקי', 'חיפוש מתקדם', 'חיפוש חדש', 'בחירת ערך מרשימה', 'הזזה מתא', 'הפניה דינמית'],
        'דוגמה_ערך_חיפוש': ['ערך לחיפוש', 'ערך לחיפוש', 'ערך לחיפוש', 'ערך לחיפוש', '2', 'A1', 'A1'],
        'תוצאה': ['ערך שנמצא', 'ערך שנמצא', 'ערך שנמצא', 'ערך שנמצא', 'אפשרות2', 'ערך בתא D3', 'ערך בתא A1']
    }
    return pd.DataFrame(lookup_data)

def create_excel_file():
    """יצירת קובץ Excel מקיף"""
    filename = 'קורס_אקסל_מקיף_עם_דוגמאות.xlsx'
    
    # יצירת writer
    with pd.ExcelWriter(filename, engine='openpyxl') as writer:
        
        # גיליון 1: נתוני עובדים
        df_employees = create_employee_data()
        df_employees.to_excel(writer, sheet_name='נתוני_עובדים', index=False)
        
        # גיליון 2: ניהול מלאי
        df_inventory = create_inventory_data()
        df_inventory.to_excel(writer, sheet_name='ניהול_מלאי', index=False)
        
        # גיליון 3: ניתוח מכירות
        df_sales = create_sales_data()
        df_sales.to_excel(writer, sheet_name='ניתוח_מכירות', index=False)
        
        # גיליון 4: ניהול פרויקטים
        df_projects = create_project_data()
        df_projects.to_excel(writer, sheet_name='ניהול_פרויקטים', index=False)
        
        # גיליון 5: נוסחאות בסיסיות
        df_formulas = create_formulas_examples()
        df_formulas.to_excel(writer, sheet_name='נוסחאות_בסיסיות', index=False)
        
        # גיליון 6: פונקציות טקסט
        df_text = create_text_functions()
        df_text.to_excel(writer, sheet_name='פונקציות_טקסט', index=False)
        
        # גיליון 7: פונקציות תאריך
        df_date = create_date_functions()
        df_date.to_excel(writer, sheet_name='פונקציות_תאריך', index=False)
        
        # גיליון 8: פונקציות לוגיות
        df_logical = create_logical_functions()
        df_logical.to_excel(writer, sheet_name='פונקציות_לוגיות', index=False)
        
        # גיליון 9: פונקציות חיפוש
        df_lookup = create_lookup_functions()
        df_lookup.to_excel(writer, sheet_name='פונקציות_חיפוש', index=False)
        
        # גיליון 10: תרגילים מעשיים
        exercises_data = {
            'תרגיל': ['תרגיל 1', 'תרגיל 2', 'תרגיל 3', 'תרגיל 4', 'תרגיל 5'],
            'נושא': ['חישוב משכורות', 'ניתוח מכירות', 'ניהול מלאי', 'ניהול פרויקטים', 'יצירת דוחות'],
            'תיאור': ['חשב משכורת נטו עם מסים', 'נתח מכירות לפי מוכר', 'זהה מוצרים עם מלאי נמוך', 'חשב איחורים בפרויקטים', 'צור דשבורד ניהולי'],
            'נוסחאות_נדרשות': ['IF, SUM, TAX', 'SUMIF, COUNTIF, AVERAGE', 'IF, COUNTIF, VLOOKUP', 'DATEDIF, IF, SUMIF', 'PIVOT, CHARTS, FORMULAS'],
            'רמת_קושי': ['קל', 'בינוני', 'בינוני', 'קשה', 'קשה']
        }
        df_exercises = pd.DataFrame(exercises_data)
        df_exercises.to_excel(writer, sheet_name='תרגילים_מעשיים', index=False)
        
        # גיליון 11: קיצורי מקלדת
        shortcuts_data = {
            'פעולה': ['שמירה', 'פתיחה', 'הדפסה', 'ביטול', 'חזרה', 'העתקה', 'הדבקה', 'חיתוך', 'חיפוש', 'החלפה'],
            'Windows': ['Ctrl+S', 'Ctrl+O', 'Ctrl+P', 'Ctrl+Z', 'Ctrl+Y', 'Ctrl+C', 'Ctrl+V', 'Ctrl+X', 'Ctrl+F', 'Ctrl+H'],
            'Mac': ['Cmd+S', 'Cmd+O', 'Cmd+P', 'Cmd+Z', 'Cmd+Y', 'Cmd+C', 'Cmd+V', 'Cmd+X', 'Cmd+F', 'Cmd+H'],
            'תיאור': ['שמירת קובץ', 'פתיחת קובץ', 'הדפסה', 'ביטול פעולה', 'חזרה על פעולה', 'העתקת בחירה', 'הדבקת בחירה', 'חיתוך בחירה', 'חיפוש טקסט', 'החלפת טקסט']
        }
        df_shortcuts = pd.DataFrame(shortcuts_data)
        df_shortcuts.to_excel(writer, sheet_name='קיצורי_מקלדת', index=False)
        
        # גיליון 12: טיפים שימושיים
        tips_data = {
            'טיפ': ['שימוש ב-F4', 'העתקת נוסחאות', 'עיצוב מותנה', 'טבלאות פיווט', 'גרפים דינמיים'],
            'תיאור': ['חזרה על פעולת עיצוב', 'העתקה עם הפניות יחסיות', 'עיצוב אוטומטי לפי תנאים', 'ניתוח נתונים מתקדם', 'גרפים שמתעדכנים אוטומטית'],
            'איך_להשתמש': ['בחר תא, לחץ F4', 'גרור פינה של תא', 'בחר נתונים > עיצוב מותנה', 'בחר נתונים > טבלת פיווט', 'צור גרף מטבלת פיווט'],
            'יתרון': ['חיסכון בזמן', 'עקביות בנוסחאות', 'זיהוי מגמות', 'ניתוח מהיר', 'עדכון אוטומטי']
        }
        df_tips = pd.DataFrame(tips_data)
        df_tips.to_excel(writer, sheet_name='טיפים_שימושיים', index=False)
    
    print(f"קובץ Excel נוצר בהצלחה: {filename}")
    return filename

if __name__ == "__main__":
    create_excel_file() 